
public class HashDictionary implements DictionaryADT {
	protected Node[] list;
	private int hashNumber;
	private int tempSize = 9999;
	public HashDictionary(int size) {
		list = new Node[size];
	}
	@Override
	public int put(Configuration data) throws DictionaryException {
		// TODO Auto-generated method stub
		int hash = 0;
		int R = 31;
		
		for(int i = 0; i<data.getStringConfiguration().length();i++) {
			hash = (R * hash + data.getStringConfiguration().charAt(i)) % tempSize;
		}
		
		hashNumber = hash;
		if(list[hash] == null) {
			list[hash] = new Node(data);
			return 0;
		} else {
			Node current = list[hash];
			while(current.hasNext()) {
				if(current.getConfiguration() != null) {
					current = current.next;
				} else {
					throw new DictionaryException("Configuration already in dictionary");
				}
			}
			current.next = new Node(data);
			return 1;
		}
	}

	@Override
	public void remove(String config) throws DictionaryException {
		// TODO Auto-generated method stub
		int hash = 0;
		int R = 31;
		
		for(int i = 0; i<config.length();i++) {
			hash = (R * hash + config.charAt(i)) % tempSize;
		}
		
		hashNumber = hash;
		
		if(list[hash] != null) {
			Node current = list[hash];
			Node prev = null;
			Node next = null;
			while(current != null) {
				next = current.next;
				if(current.getConfiguration() == config) {
					if(prev == null) {
						current = next;
					} else {
						current = next;
						prev.next = current;
					}
					return;
					
				}
				prev = current;
				current = current.next;
			}
			throw new DictionaryException("The item you're trying to delete does not exist");
		} else {
			throw new DictionaryException("The item you're trying to delete does not exist");
		}
		
		
	}

	@Override
	public int getScore(String config) {
		// TODO Auto-generated method stub
		int hash = 0;
		int R = 31;
		Node scores;
		
		for(int i = 0; i<config.length();i++) {
			hash = (R * hash + config.charAt(i)) % tempSize;
		}
		
		if(list[hash] != null) {
			//traverse through linkedlist
			Node current = list[hash];
			while(current.hasNext()) {
				if(current.getConfiguration() == config) {
					return current.getScore();
				}
				current = current.next;
			}
			if(current.getConfiguration() == config) {
				return current.getScore();
			}
			return -1;
			
			
		} else {
			return -1;
		}
	}

}
