
public class BoardGame {
	private char[][] gameBoard;
	private HashDictionary dictionary;
	private int boardSize;
	private int emptyPositions;
	private int maxLevels;
	
	public BoardGame(int board_size, int empty_positions, int max_levels) {
		boardSize = board_size;
		emptyPositions = empty_positions;
		maxLevels = max_levels;
		gameBoard = new char [boardSize][boardSize];
		
		for(int i = 0; i < boardSize; i++) {
			for(int j = 0; j < boardSize; j++) {
				gameBoard[i][j] = 'g';
			}
		}
	}
	
	public HashDictionary makeDictionary() {
		dictionary = new HashDictionary(9997);
		return dictionary;
	}
	
	public int isRepeatedConfig(HashDictionary dict) {
		//represent content of gameBoard as string 
		String board = this.boardConfiguration();
		
		//check if string is in dictionary
		if(dict.getScore(board) != -1) {
			return dictionary.getScore(board);
		} 
		return -1;
		//if it is, return score, if not return 1
	}
	
	public void putConfig(HashDictionary dict, int score) {
		//represent the board as a string (STRING)
		String board = this.boardConfiguration();
		
		Configuration data =  new Configuration(board, score);
		
		try {
			dictionary.put(data);
		} catch (DictionaryException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void savePlay(int row, int col, char symbol) {
		gameBoard[row][col] = symbol;
	}
	
	public boolean positionIsEmpty(int row, int col) {
		if(gameBoard[row][col] == 'g') {
			return true;
		} 
		return false;
	}
	
	public boolean tileOfComputer(int row, int col) {
		if(gameBoard[row][col] == 'o') {
			return true; 
		} 
		return false;
	}
	
	public boolean tileOfHuman(int row, int col) {
		if(gameBoard[row][col] == 'b') {
			return true;
		}
		return false;
	}
	
	public boolean wins(char symbol) {
		//loop through the board rows and columns 
		for(int i = 0; i < boardSize; i++) {
			//check row
			if(gameBoard[i][0] == symbol) {
				//check if row has all symbols
				for(int j = 0; j < boardSize; j++) {
					if(gameBoard[i][j] != symbol) {
						break;
					}
					if(j == boardSize-1) {
						if(gameBoard[i][j] == symbol) {
							return true;
						}
					}
				}
			}
			//Check column 
			if(gameBoard[0][i] == symbol) {
				for(var j = 0; j < boardSize; j++) {
					if(gameBoard[j][i] != symbol) {
						break;
					}
					if(j == boardSize-1) {
						if(gameBoard[i][j] == symbol) {
							return true;
						}
					}
				}
			}
			//check diagonals
			if(i == 0 && gameBoard[i][i] == symbol) {
				for(int j = 1; j < boardSize; j++) {
					if(gameBoard[j][j] != symbol) {
						break;
					} 
					if(j == boardSize-1) {
						if(gameBoard[j][j] == symbol) {
							return true;
						}
					}
				}
			}
			
			if(i == boardSize-1 && gameBoard[i][i] == symbol) {
				for(int j=boardSize-1; j < 0; j--) {
					if(gameBoard[j][j] != symbol) {
						break;
					}
					if(j == 1) {
						if(gameBoard[j][j] == symbol) {
							return true;
						}
					}
				}
			}
		}
		return false;
	}
	
	public boolean isDraw(char symbol, int empty_positions) {
		//returns true if game configuration corresponding to gameBoard is a draw assuming that the player will perform the next more uses tiles of symbol
		//second parameter is the num of positions on the gameboard that must remain empty
		//draw if empty positions on board is 0
		int[] coordinates = new int[2];
		int empty_space = 0;
		
		for(int i = 0; i < boardSize; i++) {
			for(int j = 0; j < boardSize; j++) {
				if(gameBoard[i][j] == 'g') {
					empty_space++;
				}
			}
		}
		
		
		//if empty positions > 1, check 
		if(empty_space < emptyPositions) {
			if(empty_positions == 0 || empty_space == emptyPositions) {
				return true;
			}
			
			for(int i = 0; i < boardSize; i++) {
				for(int j = 0; j < boardSize; j++) {
					if(gameBoard[i][j] == 'g') {
						coordinates[0] = i;
						coordinates[1] = j;
						if(this.hasAdjacent(symbol, coordinates)) {
							return true;
						}
					}
				}
			}
		}
		
		return false;
	}
	
	private boolean hasAdjacent(char symbol, int[] position) {

		if((position[0]-1 < boardSize && position[0]-1 > -1) && (position[1]-1 < boardSize && position[1]-1 > -1) && gameBoard[position[0]-1][position[1]-1] == symbol) {
				return true;
		} else if((position[0]-1 < boardSize && position[0]-1 > -1) && gameBoard[position[0]-1][position[1]] == symbol) {
				return true;
		} else if((position[0]-1 < boardSize && position[0]-1 > -1) &&(position[1]+1 < boardSize && position[1]+1 > -1) && gameBoard[position[0]-1][position[1]+1] == symbol) { 
				return true;
		} else if(position[1]-1 < boardSize && position[1]-1 > -1 && gameBoard[position[0]][position[1]-1] == symbol) { 
				return true;
		} else if(position[1]+1 < boardSize && position[1]+1 > -1 && gameBoard[position[0]][position[1]+1] == symbol) {
				return true;
		} else if((position[0]+1 < boardSize && position[0]+1 > -1) && (position[1]-1 < boardSize && position[1]-1 > -1) && gameBoard[position[0]+1][position[1]-1] == symbol) { 
				return true;
		} else if((position[0]+1 < boardSize && position[0]+1 > -1) && gameBoard[position[0]+1][position[1]] == symbol){
				return true;
		} else if((position[0]+1 < boardSize && position[0]+1 > -1) && (position[1]+1 < boardSize && position[1]+1 > -1) && gameBoard[position[0]+1][position[1]+1] == symbol) {
				return true;	
		}
		
		return false;
		
	}
	
	public int evalBoard(char symbol, int empty_positions) {
		if(this.wins('o')) {
			return 3;
		} else if(this.wins('b')) {
			return 0;
		} else if(this.isDraw(symbol, empty_positions)) {
			return 2;
		} else {
			return 1;
		}
	}
	private String boardConfiguration() {
		String board="";
		for(int i = 0; i < boardSize; i++) {
			for(int j=0; j < boardSize; j++) {
				board+=gameBoard[i][j];
			}
		}
		return board;
	}
 }
